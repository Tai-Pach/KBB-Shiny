set.seed(1)
#Simple random imputation using the
#impute() function from the Hmisc package.
titanic$age = impute(titanic$age, "random")
point= ggplot(titanic, aes(x = fare, y = age , fill = pclass)) + geom_point(alpha=0.5)
point
point= ggplot(titanic, aes(x = age, y = fare , fill = pclass)) + geom_point()
point
point= ggplot(titanic, aes(x = age, y = fare )) + geom_point(fill = pclass)
point= ggplot(titanic, aes(x = age, y = fare , fill = pclass)) + geom_point()
point
point= ggplot(titanic, aes(x = age, y = fare , color = pclass)) + geom_point()
point
set.seed(123)
icons <- c("motorcycle", "taxi", "bus", "boat")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
icons <- c("motorcycle", "taxi", "bus", "car")
set.seed(123)
icons <- c("motorcycle", "taxi", "bus", "car")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
??hciconarray
set.seed(123)
icons <- c("motorcycle", "taxi", "bus", "truck")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
??hciconarray
hciconarray().__dir__
hciconarray().__dir__()
icons <- c("motorcycle", "taxi", "ship", "truck")
set.seed(123)
icons <- c("motorcycle", "taxi", "ship", "truck")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
set.seed(123)
icons <- c("apple", "taxi", "ship", "truck")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
set.seed(123)
icons <- c("apple", "banana", "orange", "watermelon")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
icons <- c("apple", "banana", "orange", "kiwi")
set.seed(123)
icons <- c("apple", "banana", "orange", "kiwi")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
set.seed(123)
icons <- c("apple", "banana", "orange", "peach")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
set.seed(123)
icons <- c("apple", "banana", "orange")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
set.seed(123)
icons <- c("apple", "banana", "strawberry")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
set.seed(123)
icons <- c("apple", "banana")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
set.seed(123)
icons <- c("convertible")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
set.seed(123)
icons <- c("motorcycle", "taxi", "convertible", "truck")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
set.seed(123)
icons <- c("motorcycle", "taxi", "bike", "truck")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
set.seed(123)
icons <- c("motorcycle", "taxi", "bicycle", "truck")
n <- sample(3:10, length(icons)) %>%
sort(decreasing = TRUE) %>%
{. *  seq(length(icons), 1) }
hciconarray(icons, n, icons = icons, size = 5)
hchart(df, "scatter", hcaes(x = mileage, y = price, group = body), zoomType= xy)
hchart(df, "scatter", hcaes(x = mileage, y = price, group = body), zoomType= 'xy')
mice::md.pattern(titanic3)
# 1. How many variables contain at least one missing value?
# 3
#     + What are these variables?
#AGE, FARE, BODY
#     + For each variable, what is the extent of missingness (how many missing values are there and what is the percentage of missingness)?
#Fare has 1 (0.068); Age has 263(18.11%); Body has 1188 (81.81%)
263/1309
mice::md.pattern(titanic3)
# 1. How many variables contain at least one missing value?
# 3
#     + What are these variables?
#AGE, FARE, BODY
#     + For each variable, what is the extent of missingness (how many missing values are there and what is the percentage of missingness)?
#Fare has 1 (0.068); Age has 263(20.09%); Body has 1188 (81.81%)
1188/1309
# 1. How many variables contain at least one missing value?
# 3
#     + What are these variables?
#AGE, FARE, BODY
#     + For each variable, what is the extent of missingness (how many missing values are there and what is the percentage of missingness)?
#Fare has 1 (0.068); Age has 263(20.09%); Body has 1188 (90.76%)
1/1309
# There are 1,190 observations that contain at least one missing value
mean(!complete.cases(titanic3)) * 100
# There are 1,190 observations that contain at least one missing value
sum(!complete.cases(titanic3)) * 100
# There are 1,190 observations that contain at least one missing value
mean(!complete.cases(titanic3)) * 100
# There are 1,190 observations that contain at least one missing value
!complete.cases(titanic3)
# There are 1,190 observations that contain at least one missing value
1190/1309 *100
set.seed(0)
library(dplyr)
set.seed(0)
titanic$fare = impute(titanic$fare, "random")
titanic_fare = titanic %>% select(.,name, fare) %>% filter(., name == "Storey, Mr. Thomas")
plot(age.randomimpute, fare.randomimpute, col = col.vec)
plot(titanic$age, titanic$age, col = col.vec)
col.vec = NULL
col.vec[titanic3$pclass == "1st"] = "red"
col.vec[titanic3$pclass == "2nd"] = "blue"
col.vec[titanic3$pclass == "3rd"] = "green"
plot(titanic$age, titanic$age, col = col.vec)
legend("topleft", c("1st", "2nd", "3rd"),
pch = 1, col = c("red", "blue", "green"))
plot(titanic$age, titanic$age, col = col.vec)%>%legend("topleft", c("1st", "2nd", "3rd"),
pch = 1, col = c("red", "blue", "green"))
plot(titanic$age, titanic$fare, col = col.vec)
legend("topleft", c("1st", "2nd", "3rd"),
pch = 1, col = c("red", "blue", "green"))
new.people = data.frame(age = c(50, 10), fare = c(400, 100), pclass = NA)
points(new.people, pch = 16)
titanic.imputed = data.frame(age = age.randomimpute,
fare = fare.randomimpute,
pclass = titanic3$pclass)
titanic.imputed = data.frame(age = titanic$age,
fare = titanic$fare,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
library(Hmisc)
library(Hmisc)
titanic.imputed = data.frame(age = titanic$age,
fare = titanic$fare,
pclass = titanic3$pclass)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
library(VIM)
titanic.1NN = kNN(rbind(titanic.imputed, new.people), k = 1)
View(titanic.1NN)
View(titanic.1NN)
k <- as.integer(sqrt(nrow(titanic.imputed)))
titanic.36NN = kNN(rbind(titanic.imputed, new.people), k = k)
View(titanic.36NN)
titanic.notimputed = cbind(titanic3[, -c(3, 8:14)], fare = fare.randomimpute)
titanic.notimputed = cbind(titanic3[, -c(3, 8:14)], fare = titanic$fare)
complete = titanic.notimputed[complete.cases(titanic.notimputed),]
missing = titanic.notimputed[!complete.cases(titanic.notimputed), -4]
library(kknn)
install.packages('kknn)
install.packages('kknn')
install.packages('kknn')
library(kknn)
titanic.1nnmanhattan = kknn(age ~ ., complete, missing, k = 1, distance = 1)
titanic.1nneuclidean = kknn(age ~ ., complete, missing, k = 1, distance = 2)
titanic.1nnminkowski10 = kknn(age ~ ., complete, missing, k = 1, distance = 10)
plot(density(titanic.1nnmanhattan$fitted.values), col = "red",
main = "Minkowski Imputation for Age\n1 Nearest Neighbor")
lines(density(titanic.1nneuclidean$fitted.values), col = "green")
lines(density(titanic.1nnminkowski10$fitted.values), col = "blue")
lines(density(titanic3$age, na.rm = TRUE), col = "purple", lty = 2)
legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 2))
titanic.36nnmanhattan = kknn(age ~ ., complete, missing, k = 36, distance = 1)
titanic.36nneuclidean = kknn(age ~ ., complete, missing, k = 36, distance = 2)
titanic.36nnminkowski10 = kknn(age ~ ., complete, missing, k = 36, distance = 10)
plot(density(titanic.36nnmanhattan$fitted.values), col = "red",
main = "Minkowski Imputation for Age\n36 Nearest Neighbors")
lines(density(titanic.36nneuclidean$fitted.values), col = "green")
lines(density(titanic.36nnminkowski10$fitted.values), col = "blue")
lines(density(titanic3$age, na.rm = TRUE), col = "purple", lty = 2)
legend("topright", c("Manhattan", "Euclidean", "p = 10", "Original"),
col = c("red", "green", "blue", "purple"), lwd = 1, lty = c(1, 1, 1, 2))
library(shiny)
library(shiny.semantic)
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
library(semantic.dashboard)
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
library(shiny)
library(shiny.semantic)
library(leaflet)
library(dplyr)
library(data.table)
library(highcharter)
df <- fread('KBB_used_final_3.csv')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
library(shiny)
library(shiny.semantic)
library(semantic.dashboard)
library(leaflet)
library(data.table)
library(highcharter)
library(dplyr)
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
map <- leaflet(df$location) %>% addProviderTiles("Hydda.Full") %>% addMarkers()
install.packages('plotGoogleMaps')
library(ggmap)
install.packages('ggmap')
library(ggmap)
AddressFrequency <- function(addresses){
tab <- table(addresses)
unique.points <- data.frame(address=names(tab), frequency = c(tab))
rownames(unique.points) <- NULL
unique.points
}
all.addresses <- c(df$location,df$location)
freq <- AddressFrequency(all.addresses)
freq <- cbind(freq, geocode(as.character(freq$address)))
centre = c(mean(freq$lon, na.rm=TRUE), mean(freq$lat, na.rm=TRUE))
map = get_map(location = centre, zoom=11, scale=2, source = "google", maptype="roadmap")
# to use factos for frequencies
# freq$frequency <- factor(freq$frequency)
map.plot = ggmap(map)
map.plot = map.plot + geom_point(data = freq, aes(x = lon, y = lat, colour = frequency), size=3)
# to use color brewer gradient scale:
# library(RColorBrewer)
# map.plot = map.plot +  scale_colour_gradientn(colours=rainbow(4))
print(map.plot)
View(freq)
View(freq)
freq <- cbind(freq, geocode(head(freq$address,2500)))
freq <- cbind(freq, geocode(as.characer(head(freq$address,2500))))
freq <- cbind(freq, geocode(as.character(head(freq$address,2500))))
########################################################
#####Example using Graduate Schools Admissions Data#####
########################################################
GradSchools = read.table("Graduate_Schools.txt")
########################################################
#####Example using Graduate Schools Admissions Data#####
########################################################
GradSchools = read.table("Graduate_Schools.txt")
########################################################
#####Example using Graduate Schools Admissions Data#####
########################################################
GradSchools = read.table("Graduate_Schools.txt")
setwd("C:/Users/pache_000/Desktop/Class/Missingness_Imputation")
########################################################
#####Example using Graduate Schools Admissions Data#####
########################################################
GradSchools = read.table("Graduate_Schools.txt")
head(GradSchools)
summary(GradSchools) #Looking at the five number summary information.
sapply(GradSchools, sd) #Looking at the individual standard deviations.
sapply(GradSchools, class) #Looking at the variable classes.
table(GradSchools$admit)/nrow(GradSchools) #Manually calculating the proportions.
unique(df$location)
sum(unique(df$location))
count(unique(df$location))
df2  = df %>% select(., location) %>% group_by(., location) %>% summarise(count = n())
df2  = df %>% select(., location) %>% group_by(., location) %>% summarise(., count = n())
View(df)
head(df$location)
df2  = df %>% select(., df$location) %>% group_by(., location) %>% summarise(., count = n())
library(dplyr)
df2  = df %>% select(., location) %>% group_by(., location) %>% summarise(., count = n())
df2  = df %>% select(., body) #%>% group_by(., location) %>% summarise(., count = n())
df2  = df %>% select(body) #%>% group_by(., location) %>% summarise(., count = n())
df %>% select(body) #%>% group_by(., location) %>% summarise(., count = n())
df2 = df %>% dplyr::select(., location) %>% group_by(., location) %>% summarise(., count = n())
View(df2)
freq <- cbind(freq, geocode(as.character(head(freq$address,2500))))
warnings()
View(freq)
centre = c(mean(freq$lon, na.rm=TRUE), mean(freq$lat, na.rm=TRUE))
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
df <- fread('kbb.csv')
setwd("C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny/data")
df <- fread('kbb.csv')
runApp('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny')
setwd("C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- fread('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny/data/kbb.csv')
df$location = gsub('  ', ' ', df$location)
View(df)
write.csv(df, file = 'C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny/data/kbb.csv', row.names = F)
df <- fread('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny/data/kbb.csv')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(MASS)
cats <- data("cats")
head(cats)
cats <- data(cats)
head(cats)
cats <- MASS::cats
head(cats)
hchart(cats, "scatter", hcaes(x = Hwt, y = Bwt, group = Sex))
hchart(cats, "scatter", hcaes(x = BWt, y = Hwt, group = Sex))
hchart(cats, "scatter", hcaes(x = Bwt, y = Hwt, group = Sex))
hchart(cats, "scatter", hcaes(x = Hwt, y = Bwt, group = Sex))
model = lm(Hwt ~ Bwt, data = cats)
summary(model)
#################################################
#####Automatic example with the cars dataset#####
#################################################
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
summary(model) #All the summary information for the model in question. Reports:
model = lm(Hwt ~ Bwt, data = cats)
summary(model)
bc = boxCox(model)
bc = boxCox(cats$Hwt)
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
#value that maximizes the likelihhood of transforming to
#normality.
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value.
dist.bc = (cars$dist^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(dist.bc ~ cars$speed) #Creating a new regression based on the
#transformed variable.
summary(model.bc) #Assessing the output of the new model.
plot(model.bc) #Assessing the assumptions of the new model.
boxCox(model.bc) #What happens if we want to apply the Box-Cox transformation
#a second time?
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
#value that maximizes the likelihhood of transforming to
#normality.
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value.
dist.bc = (cats$dist^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(dist.bc ~ cars$speed) #Creating a new regression based on the
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
#value that maximizes the likelihhood of transforming to
#normality.
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value.
dist.bc = (cats$dist^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(dist.bc ~ cats$speed) #Creating a new regression based on the
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
#value that maximizes the likelihhood of transforming to
#normality.
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value.
dist.bc = (cats$Hwt^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(dist.bc ~ cats$Bwt) #Creating a new regression based on the
#transformed variable.
summary(model.bc) #Assessing the output of the new model.
plot(model.bc) #Assessing the assumptions of the new model.
boxCox(model.bc) #What happens if we want to apply the Box-Cox transformation
#a second time?
#a second time?
boxCox(boxCox(model.bc))
boxCox(model.bc) #What happens if we want to apply the Box-Cox transformation
hchart(cats, "scatter", hcaes(x = Hwt, y = Bwt, group = Sex), plotLines = list(
list(label = list(text = "This is a plotLine"),
color = "#FF0000",
width = 2,
value = 5.5)))
hchart(cats, "scatter", hcaes(x = Hwt, y = Bwt, group = Sex), plotLines = list(
list(label = list(text = "This is a plotLine"),
color = "#FF0000",
width = 2,
value = 4.0341*Hwt - 0.3567)))
hchart(cats, "scatter", hcaes(x = Hwt, y = Bwt, group = Sex), plotLines = list(
list(label = list(text = "This is a plotLine"),
color = "#FF0000",
width = 2,
value = 4.0341*cats$Hwt - 0.3567)))
hchart(cats, "scatter", hcaes(x = Hwt, y = Bwt, group = Sex, plotLines = list(
list(label = list(text = "This is a plotLine"),
color = "#FF0000",
width = 2,
value = 4.0341*cats$Hwt - 0.3567))))
#a second time?
boxCox(bc)
plot(model)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
boxcox(model.bc)  # this uses the box-cox model completed in the code below (Question 3)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- fread('C:/Users/pache_000/Desktop/KBB_Shiny/KBB_Shiny/data/kbb.csv')
runApp()
runApp()
runApp()
runApp()
